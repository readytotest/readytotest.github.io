<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
        <meta http-equiv="Pragma" content="no-cache">
        <meta http-equiv="Expires" content="0">
        <title>Ready to Test (QA)</title>
        
        <!-- Preconnect to Google Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        
        <!-- Import from Google Fonts -->
        <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
        <!-- Favicon -->
        <link rel="icon" type="image/x-icon" href="/fav.ico">
        
        <!-- CSS Stylesheets -->
        <link rel="stylesheet" href="/css/default.css">
    </head>
    <body>
        <div id="top-philosophy"></div>
            <pre>
88""Yb 888888    db    8888b.  Yb  dP   888888  dP"Yb    888888 888888 .dP"Y8 888888 
88__dP 88__     dPYb    8I  Yb  YbdP      88   dP   Yb     88   88__   `Ybo."   88   
88"Yb  88""    dP__Yb   8I  dY   8P       88   Yb   dP     88   88""   o.`Y8b   88   
88  Yb 888888 dP""""Yb 8888Y"   dP        88    YbodP      88   888888 8bodP'   88                                                                                                  
            </pre>
            <i>Software Quality Assurance ‚òÖ Test Automation ‚òÖ Manual Testing</i>
            <br>
            <i>Current Date & Time (Pacific) ‚òÖ <a href="https://github.com/readytotest/readytotest.github.io/blob/main/js/dateAndTime.js" target="_blank" rel="noopener noreferrer"><span id="current-time"></span></a></i>
            <br>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <br>
            ------------------------------------------------------------------------
            <br>
            <b>My QA Philosophy</b> ü§î
            <br>
            <a href="/index.htm">Go back ‚Æê</a>
            <br>
            <br>
            <div data-testid="thoughts-sqa">
            <span class="sections"><b>Thoughts on Software Quality Assurance</b></span> üí≠
            <br>
            - I see my role as an observer and communicator, not as the gatekeeper
            <br>
            - or ‚Äòquality police.' I provide feedback, not roadblocks. If the team
            <br>
            - wants to ship something, my job is to make them aware of potential
            <br>
            - issues, not to hold things up. This approach has helped me build
            <br>
            - strong, collaborative relationships with developers, designers, and PMs.
            <br>
            <br>
            - Quality is a team effort, not just a post-coding activity.
            <br>
            <br>
            - QA teams are there to complement and enhance quality efforts,
            <br>
            - not to replace them entirely. Developers, product managers,
            <br>
            - designers, and other stakeholders play a crucial role in maintaining
            <br>
            - quality standards throughout the development process.
            <br>
            <br>
            - It's impractical to test every possible scenario.
            <br>
            <br>
            - Additional defects found by exhaustive testing may not justify
            <br>
            - the resources invested in leaving no stone unturned.
            <br>
            <br>
            - Not all parts of an application are equally important
            <br>
            - or carry the same level of risk.
            <br>
            <br>
            - Testing should be concentrated on the areas that are most critical
            <br>
            - to the users and have the highest impact on the user experience. 
            <br>
            <br>
            - Not all bugs are worth fixing.
            <br>
            </div>  
            ------------------------------------------------------------------------
            <br>
            <span class="sections"><b>A Holistic Approach to Quality</span></b></span>
            <br>
            My approach to quality assurance goes beyond finding bugs. I
            <br>
            look at the application as a whole, identifying gaps in requirements
            <br>
            and assessing not just functionality but the overall user experience.
            <br>
            Often, I find areas where the code meets the technical specifications,
            <br>
            but the spec itself didn't fully consider certain user perspectives or
            <br>
            scenarios. My goal is to provide feedback that aligns with real-world
            <br>
            usage, helping teams anticipate potential issues and improving the product
            <br>
            for end users. I aim for software that's as functional as it is user-friendly.
            <br>
            ------------------------------------------------------------------------
            <br>
            <span class="sections"><b>Work Style and Collaboration</b></span>
            <br>
            <span class="orangeFont"><b>I value..</b></span>
            <br>
            thoughtful, independent work and can produce high-quality results
            <br>
            in less stressful environments. I perform best in environments
            <br>
            where I have the space to think things through and manage my tasks at
            <br>
            a steady, efficient pace. I prefer fewer meetings, minimal
            <br>
            distractions, and an asynchronous work style that allows me to focus
            <br>
            deeply and deliver quality work while still staying aligned with the
            <br>
            team. While I work best when I have time for deep focus and independent
            <br>
            tasks, I also thrive in smaller collaborative settings, such as working
            <br>
            closely with developers. I'm always ready to seek help when I hit a
            <br>
            roadblock or be there for the team when they need me.
            <br>
            <br>
            <span class="orangeFont"><b>I'm comfortable..</b></span>
            <br>
            with vague or evolving requirements. I don't need everything spelled
            <br>
            out for me or much handholding. In fact, I actually prefer unstructured
            <br>
            environments because they give me the freedom and autonomy to figure
            <br>
            things out as I go. I trust my judgment and experience to guide me when
            <br>
            things aren't perfectly laid out and enjoy the challenge of navigating
            <br>
            ambiguity. If something doesn't feel right, I'll ask for clarification,
            <br>
            but I'm comfortable with taking the initiative to find solutions
            <br>
            independently.
            <br>
            <br>
            <span class="orangeFont"><b>I'm not a fit for..</b></span>
            <br>
            environments with aggressive deadlines, hustle culture, or sprint
            <br>
            planning that holds you hostage based on initial story point estimates.
            <br>
            Most of my previous roles have had very few deadlines, allowing me to
            <br>
            work at my own pace, which seemed to always satisfy the team and sync
            <br>
            well with the overall workflow. I've primarily worked in small companies
            <br>
            and very small teams with sometimes just a couple of developers where
            <br>
            the focus was on collaboration and delivering quality work, not rushing
            <br>
            to meet deadlines.
            <br>
            ------------------------------------------------------------------------
            <br>
            <span class="sections"><b>Thoughts on Waterfall, Agile, Scrum, Kanban</b></span> üí≠
            <br>
            I've worked in a mix of Waterfall and Agile setups, and it's been a
            <br>
            bit of a mashup. In some places, things were handed off to QA after
            <br>
            devs finished their initial coding, which was like Waterfall with Agile
            <br>
            ceremonies and a 2-week sprint sprinkled on top. Another place ran
            <br>
            more Kanban style, no timeboxed sprints, no deadlines. Also have been
            <br>
            involved in the design phase and at one place I was taking stakeholder
            <br>
            requests and turning them into requirements.
            <br>
            <br>
            <span class="orangeFont" id="agile-scrum-anti-patterns">Agile/Scrum Anti-Patterns</span> ‚ùå
            <br>
            It's a Scrum anti-pattern to <u>link story points to hours</u>, and I've worked
            <br>
            in a place that did this. Tying points to hours can make it seem like there's a
            <br>
            clear path to when things will be done. They'd assign story points to a Jira
            <br>
            ticket and then <u>divide those points equally among the team</u>. ‚ÄúOkay, there's
            <br>
            30 points, and 5 people, so each person gets 6 points.‚Äù Sounds fair, right? But
            <br>
            it's an anti-pattern. The points represent the team's collective effort, not an
            <br>
            individual quota. Not everyone works at the same speed, so one person might take
            <br>
            longer for the same story points. And that's okay. It doesn't mean someone's
            <br>
            slacking, it just means the work is different or they work at a different pace,
            <br>
            and that's how things should be.
            <br>
            <br>
            Another pitfall I've seen is <u>treating estimates like commitments</u>. The thing
            <br>
            is, estimates are just that...estimates. They're GUESSES based on what we
            <br>
            know at the time, and they're almost guaranteed to be wrong. Yet, I've been
            <br>
            in places where once an estimate was made, it was treated like a firm
            <br>
            commitment. Sometimes you hit blockers nobody saw coming, like a task
            <br>
            that seemed straightforward turns out to be way more complex. It's like 
            <br>
            saying, ‚ÄúI'll be there in 10 minutes,‚Äù but then realizing you're still
            <br>
            figuring out what to wear.
            <br>
            <br>
            When you tie story points directly to hours, expect each person to hit a
            <br>
            fixed amount of points, or turn estimates into commitments, it often leads
            <br>
            to micromanaging and focuses more on output than the quality or value being
            <br>
            delivered.
            <br>
            <br>
            One of the more illogical aspects of this environment was how QA work
            <br>
            was treated. If a Jira ticket was assigned 4 points for development,
            <br>
            QA automatically got 2 points for testing. It's like assuming cleaning the
            <br>
            kitchen is always half the effort of cooking dinner.
            <br>
            <br>
            For me, it's more about collaborating, delivering value, and continuously
            <br>
            improving, not chasing numbers or deadlines.
            <ol>
            <li><a href="https://resources.scrumalliance.org/Article/story-point-estimation" target="_blank" rel="noopener noreferrer">What Is Story Point Estimation?</a></li>
            <li><a href="https://www.scrum.org/resources/commitment-vs-forecast" target="_blank" rel="noopener noreferrer">Commitment vs. Forecast: A Subtle But Important Change to Scrum</a></li>
            <li><a href="https://www.scrum.org/resources/blog/story-points-estimate-or-not-estimate" target="_blank" rel="noopener noreferrer">Story Points: To Estimate or Not to Estimate</a></li>
            </ol>
            ------------------------------------------------------------------------
            <br>
            <span class="sections"><b>Thoughts on Manual Testing</b></span> üí≠
            <br>
            I find value in exploratory testing. It's the freedom to approach
            <br>
            testing naturally, seeing the software through the eyes of an end
            <br>
            user. Without the confinement of scripts, it opens the door to
            <br>
            creativity and adaptability. This flexibility allows me to uncover
            <br>
            issues that might otherwise slip through the cracks. It also
            <br>
            encourages usability and UX observations that may not be considered
            <br>
            during a structured test. It's where testing transforms into an art,
            <br>
            using my curiosity, intuition, and testing instinct to uncover
            <br>
            unexpected issues.
            <br>
            ------------------------------------------------------------------------
            <br>
            <span class="sections"><b>Thoughts on Automation Testing</b></span> üí≠
            <br>
            I'm all for automation, but I feel the idea of automating 
            <br>
            everything should be approached with caution.  I'm not jumping
            <br>
            on the automate everything bandwagon and recognize the pitfalls
            <br>
            of flaky tests and heavy maintenance burdens. It's not a
            <br>
            magic wand that makes manual testing disappear. There's a
            <br>
            misconception that it always saves time, but in reality, that's
            <br>
            not a guarantee. I believe in a balance between manual and
            <br>
            automated testing.
            <br>
            <br>
            - Automation doesn't eliminate the need for manual testing.
            <br>
            - Automation won't always save time over manual testing.
            <br>
            - Not every test is a good candidate or suitable for automation.
            <br>
            - Creating an automation script requires an initial time investment.
            <br>
            - Automation scripts require an ongoing time investment (maintenance).
            <br>
            - Automation suite can grow too big and become unmanageable.
            <br>
            - Be prepared to deal with and troubleshoot flaky tests.
            <br>
            - Automation often leads to unexpected challenges.
            <br> 
            <br> 
            Looking ahead is important. If the product roadmap says a part
            <br>
            of our site is getting a facelift in the next couple of months, 
            <br>
            maybe we shouldn't go all-in on automation scripts just yet. 
            <br>
            The last thing we want is to spend more time maintaining
            <br>
            automation scripts than we save by having them.
            <br>
            <br>
            Also we need to keep in mind that automated scripts can be sensitive,
            <br>
            behaving differently between environments. What works perfectly in
            <br>
            your local environment, might throw a fit in the <a href="https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners" target="_blank" rel="noopener noreferrer">GitHub Actions runner</a>.
            <br>
            ------------------------------------------------------------------------
            <br>
            <span class="yellowFont" id="joke-section">You made it all the way down here, so we'll give you a Joke.</span>
            <br>
            <span id="joke-id"></span>
            <br>
            <span id="joke-setup"></span>
            <br>
            <span id="joke-punchline" class="blinking-text"></span>
            <br>
            Joke API source file: <a href="https://github.com/readytotest/readytotest.github.io/blob/main/js/jokeApi.js" target="_blank" rel="noopener noreferrer">jokeApi.js</a>
            <br>
            ------------------------------------------------------------------------
            <br>
            <a href ="#top-philosophy">Top <span class="arrow" data.cy="up-arrow-philosophy">‚áß</span></a>
            <!-- Keep three line breaks at bottom so it's easier to access the 'Top' link using iphone -->
            <br>
            <br>
            <br>
            <script src='https://js.sentry-cdn.com/67cde871b86c2bc34ccf16cbbd00f446.min.js' crossorigin="anonymous"></script>
            <script src="/js/dateAndTime.js"></script>
            <script src="/js/jokeApi.js"></script>
        </body>
        </html>