<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <title>Ready to Test (QA)</title>

    <!-- Preconnect to Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Import from Google Fonts -->
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Comic+Neue:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
      rel="stylesheet"
    />
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/fav.ico" />

    <!-- CSS Stylesheets -->
    <link rel="stylesheet" href="/css/default.css" />
  </head>
  <body>
    <span id="top-philosophy"></span>
    <pre>
88""Yb 888888    db    8888b.  Yb  dP   888888  dP"Yb    888888 888888 .dP"Y8 888888 
88__dP 88__     dPYb    8I  Yb  YbdP      88   dP   Yb     88   88__   `Ybo."   88   
88"Yb  88""    dP__Yb   8I  dY   8P       88   Yb   dP     88   88""   o.`Y8b   88   
88  Yb 888888 dP""""Yb 8888Y"   dP        88    YbodP      88   888888 8bodP'   88                                                                                                  
            </pre
    >
    <i>Software QA and Support ‚òÖ Automation ‚òÖ Manual Testing</i>
    <br />
    <i
      >Current Date & Time (Pacific) ‚òÖ
      <a
        href="https://github.com/readytotest/readytotest.github.io/blob/main/js/dateAndTime.js"
        target="_blank"
        rel="noopener noreferrer"
        ><span id="current-time"></span></a
    ></i>
    <br />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <img src="/html/img/star.svg" height="50px" width="50px" />
    <br />
    ------------------------------------------------------------------------
    <br />
    <b>My QA Philosophy</b> ü§î
    <br />
    <a href="/index.htm">index.htm ‚Æê</a>
    <br />
    <br />
    <div data-testid="qa-philosophy">
      <span class="sections">Thoughts on Software Quality Assurance</span> üí≠
      <br />
      - QA exists to protect the business and be an advocate for the
      <br />
      - end user. It's about spotting risks like UX friction, gaps in
      <br />
      - requirements, security holes, and compliance blind spots before
      <br />
      - they become bigger problems.
      <br />
      <br />
      - If it all ‚Äúlooks good,‚Äù that's your cue to look deeper.
      <br />
      <br />
      - QA isn't just about clicking through features and reporting
      <br />
      - obvious bugs. It's about digging deeper even when things seem
      <br />
      - fine, asking whether things actually make sense, and not
      <br />
      - assuming what's given to you is correct.
      <br />
      <br />
      - See why <a href="/html/it-works.htm">"It works" isn't enough in QA</a>.
      <br />
      <br />
      - I see QA as an observer and communicator, not as a gatekeeper
      <br />
      - or the 'quality police.' My job is to provide insights so the team
      <br />
      - can make informed decisions, not create roadblocks.
      <br />
      <br />
      - Quality kicks in way before code shows up. Upstream affects
      <br />
      - downstream. Bugs don't only originate in the code. They also
      <br />
      - come from rushed choices, <a href="/html/requirement-gap.htm">fuzzy requirements</a>, and blind spots.
      <br />
      - Testing can catch some stuff later, but it's a lot harder to fix
      <br />
      - the foundation after the house is already built.
      <br />
      <br />
      - If QA collaborates early they can help the team spot where
      <br />
      - cracks might form before the concrete is even placed.
      <br />
      <br />
      - QA Bottleneck? <a href="/html/qa-bottleneck.htm">Here's How to Fix It</a>.
      <br />
      <br />
      <span id="weak-tests">‚úÖ Just because your tests pass doesn't mean your</span> product does.
      <br />
      ‚úÖ It just means the code did what the tests expected. If the
      <br />
      ‚úÖ tests are weak, then those green check marks are worthless.
      <br />
      ‚úÖ It's like a car passing an inspection that never checked the
      <br />
      ‚úÖ brakes.
      <br />
      <br />
      - You're shaping the product with a focus on user experience
      <br />
      - and business impact. Say you're testing a new checkout flow.
      <br />
      - The goal is more sales. If the process feels cumbersome you
      <br />
      - flag it, even if there are no functional bugs, because it
      <br />
      - might cause people to abandon their cart. You're not just
      <br />
      - testing the features, you're testing the experience.
      <br />
      <br />
      - When you're checking your own work, you're too close to it.
      <br />
      - Everyone has blind spots.
      <br />
      <br />
      <span id="wont-do"> - Not all bugs are worth fixing</span>. In the real world, teams don't
      <br />
      - have unlimited time or dev resources to fix every bug and make
      <br />
      - everything perfect. You prioritize. Some bugs just don't matter
      <br />
      - enough to fix, and so you mark them as "won't do" and move on.
      <br />
      <br />
      - Not all parts of an application are equally important or carry
      <br />
      - the same level of risk.
      <br />
      <br />
      <span id="pull-requests">- Look at the pull request and diff, even if you can't read the code.</span>
      <br />
      - How big of a change is it (one file or ten?), and in which areas?
      <br />
      - Check the PR convo too. If it says, ‚ÄúWait, are we sure this is the
      <br />
      - right behavior?‚Äù or ‚ÄúQuick patch before launch,‚Äù then you should
      <br />
      - probably test more thoroughly. I'm not reviewing code; I'm looking
      <br />
      - at PRs to understand scope, risk, and the story behind the change.
      <br />
      <br />
      <span id="goodharts-law"
        >-
        <a href="https://en.wikipedia.org/wiki/Goodhart%27s_law" target="_blank" rel="noreferrer noopener"
          >Goodhart's Law</a
        ></span
      >
      says: "When a measure becomes a target, it
      <br />
      - ceases to be a good measure." Look at the
      <a href="https://www.bbc.com/news/business-34324772" target="_blank" rel="noreferrer noopener"
        >VW emissions scandal</a
      >.
      <br />
      - If metrics become the goal, you may end up with a team protecting
      <br />
      - numbers instead of actually improving software.
      <br />
      <br />
      -----
      <br />
      <span id="tight-deadlines"
        >If
        <a
          href="https://www.meegle.com/en_us/topics/challenge/tight-deadlines"
          target="_blank"
          rel="noopener noreferrer"
          >tight deadlines</a
        >
        are <span class="yellowFont">always the norm</span>, that points to deeper issues:</span
      >
      <ol>
        <li>Unrealistic expectations from stakeholders</li>
        <li>Poor upfront planning</li>
        <li>Lack of resources</li>
        <li>Unclear or constantly shifting requirements</li>
        <li>Lack of communication and alignment across teams</li>
        <li>Constant last-minute changes</li>
        <li>Pressure to ship fast before teams are ready</li>
      </ol>
      - Constant pressure leads to rushing, cutting corners, and quick
      <br />
      - fixes. That's when
      <a
        href="https://www.meegle.com/en_us/topics/challenge/tight-deadlines#consequences-of-tight-deadlines"
        target="blank"
        rel="noopener noreferrer"
        >quality drops</a
      >. Focus moves from doing it right
      <br />
      - to just getting it done. When this becomes the norm, it creates
      <br />
      - burnout culture.
      <br />
      -----
      <br />
      <br />
      - If a team pushes fast, takes risks, and things go sideways,
      <br />
      - <a href="/html/qa-accountability.htm">QA shouldn't be the only one held responsible</a>.
      <br />
      ------------------------------------------------------------------------
      <br />
      <span class="sections">Thoughts on Manual Testing</span> üí≠
      <br />
      - Manual testing is needed for exploring new features, identifying
      <br />
      - edge cases, and understanding the user experience.
      <br />
      <br />
      - I'm an exploratory tester who first started in UX research
      <br />
      - and I've seen first hand that users don't follow expected
      <br />
      - behaviors or assumptions about workflows. You know those
      <br />
      - preconceived ideas or fixed paths people expect users to
      <br />
      - take, like assuming everyone uses the app the same way or
      <br />
      - follows the ‚Äúhappy path‚Äù perfectly. Real users often do
      <br />
      - things differently or unexpectedly. I may jot down some
      <br />
      - areas or scenarios that I want to explore, but I don't follow
      <br />
      - a strict script.
      <br />
      <br />
      - Some people think manual testing doesn't take much skill.
      <br />
      - Sure, anyone can do it, but it's like anyone can cook a
      <br />
      - meal. It doesn't mean it's any good. Some follow the recipe
      <br />
      - without knowing why, miss the details, and forget about the
      <br />
      - user experience. That surface-level testing means the real
      <br />
      - users end up finding the frustrating bugs in production. üòÖ
      <br />
      - Really good manual testing is definitely not less valuable
      <br />
      - or easier than automation. It's just a different, creative
      <br />
      - kind of skill not everyone has.
      <br />
      <br />
      - If written test cases are needed, that time's better spent
      <br />
      - writing out the documentation as code in an automation script.
      <br />
      ------------------------------------------------------------------------
      <br />
      <span class="sections" id="automation-testing">Thoughts on Automation Testing</span> üí≠
      <br />
      - Automation is a tool; it's not the whole toolkit. It doesn't
      <br />
      - replace manual testing. Automation can't replace human intuition
      <br />
      - or creativity, and it will miss anything that requires thinking
      <br />
      - outside the script.
      <br />
      <br />
      - Automation knows code. It doesn't know people. It can tell you
      <br />
      - if a button works, but not if it makes sense. It can check if
      <br />
      - the form submits, but not if it frustrates users. It runs scripts.
      <br />
      - It doesn't ask why something feels off. That's what humans do.
      <br />
      <br />
      üöô Automation passed, experience failed. Even if the brakes
      <br />
      üöô work, it doesn't mean the car is comfortable, the controls
      <br />
      üöô are intuitive, and the dashboard is easy to read. Automation
      <br />
      üöô won't uncover any of this. It just checks if the car moves.
      <br />
      <br />
      - Not every test is a good candidate or suitable for automation.
      <br />
      - Some tests are too complex, too flaky, or depend on things
      <br />
      - outside your control.
      <br />
      <br />
      - The automation suite can grow too big and become unmanageable.
      <br />
      - Focus on the critical paths and high-risk areas of the application.
      <br />
      <br />
      - Don't forget to <span class="color-shift-usa">test your tests</span>. You want to avoid the flaky ones.
      <br />
      - You'll have flaky tests no matter what, like assertions failing due
      <br />
      - due to time zones or environment quirks, so be ready when the devs
      <br />
      - say, ‚ÄúHey, your test broke my PR for no reason.‚Äù
      <br />
      <br />
      - And brittle tests? They break with small changes like targeting the
      <br />
      - nth element, then a front-end dev adds one above it, and boom, your
      <br />
      - test fails. Sometimes you can't avoid those selectors because of how
      <br />
      - the code's built, and if you can't add a custom HTML attribute like
      <br />
      - datatest-id, you'll just learn to live with it.
      <br />
      <br />
      - Looking ahead is important. If the product roadmap says a part
      <br />
      - of our site is getting a facelift in the next couple of months,
      <br />
      - maybe we shouldn't go all-in on automation scripts just yet.
      <br />
      - The last thing we want is to spend more time maintaining
      <br />
      - automation scripts than we save by having them.
      <br />
      <br />
      - Also we need to keep in mind that automated scripts can be
      <br />
      - sensitive, behaving differently between environments. What
      <br />
      - works perfectly in your local environment, might throw a fit
      <br />
      - in the
      <a
        href="https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners"
        target="_blank"
        rel="noopener noreferrer"
        >GitHub Actions runner</a
      >.
      <br />
      ------------------------------------------------------------------------
      <br />
      <span class="yellowFont" id="joke-section">You made it all the way down here, so we'll give you a Joke.</span>
      <br />
      <span id="joke-id"></span>
      <br />
      <span id="joke-setup"></span>
      <br />
      <span id="joke-punchline" class="blinking-text"></span>
      <br />
      Joke API source file:
      <a
        href="https://github.com/readytotest/readytotest.github.io/blob/main/js/jokeApi.js"
        target="_blank"
        rel="noopener noreferrer"
        >jokeApi.js</a
      >
      <br />
    </div>
    ------------------------------------------------------------------------
    <br />
    <a href="#top-philosophy">Top <span class="arrow" data.cy="up-arrow-philosophy">‚áß</span></a>
    <!-- Keep three line breaks at bottom so it's easier to access the 'Top' link using iphone -->
    <br />
    <br />
    <br />
    <script
      src="https://js.sentry-cdn.com/67cde871b86c2bc34ccf16cbbd00f446.min.js"
      integrity="sha384-Qahst9HuvCM5NFn63+0bd3vv5tZ0ZoxJMxt061RU0dfyOOwHEElLKayYjis4JG/N"
      crossorigin="anonymous"
    ></script>
    <script src="/js/dateAndTime.js"></script>
    <script src="/js/jokeApi.js"></script>
  </body>
</html>
