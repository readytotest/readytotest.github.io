<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
        <meta http-equiv="Pragma" content="no-cache">
        <meta http-equiv="Expires" content="0">
        <title>Ready to Test (QA)</title>
        
        <!-- Preconnect to Google Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        
        <!-- Import from Google Fonts -->
        <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
        <!-- Favicon -->
        <link rel="icon" type="image/x-icon" href="/fav.ico">
        
        <!-- CSS Stylesheets -->
        <link rel="stylesheet" href="/css/default.css">
    </head>
    <body>
        <div id="top-work-style"></div>
            <pre>
88""Yb 888888    db    8888b.  Yb  dP   888888  dP"Yb    888888 888888 .dP"Y8 888888 
88__dP 88__     dPYb    8I  Yb  YbdP      88   dP   Yb     88   88__   `Ybo."   88   
88"Yb  88""    dP__Yb   8I  dY   8P       88   Yb   dP     88   88""   o.`Y8b   88   
88  Yb 888888 dP""""Yb 8888Y"   dP        88    YbodP      88   888888 8bodP'   88                                                                                                  
            </pre>
            <i>Software Quality Assurance ★ Test Automation ★ Manual Testing</i>
            <br>
            <i>Current Date & Time (Pacific) ★ <a href="https://github.com/readytotest/readytotest.github.io/blob/main/js/dateAndTime.js" target="_blank" rel="noopener noreferrer"><span id="current-time"></span></a></i>
            <br>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <img src="/html/img/star.svg" height="50px" width="50px"></img>
            <br>
            ------------------------------------------------------------------------
            <br>
            <span class="sections" id="work-style"><b>Work Style and Collaboration</b></span>
            <br>
            <a href="/index.htm">Go back ⮐</a>
            <br>
            <br>
            I know being upfront about my preferences might limit some
            <br>
            opportunities, but I'm more interested in finding the right fit
            <br>
            than just landing any job. I'm not here to craft a generic
            <br>
            LinkedIn profile full of safe, predictable statements that tick
            <br>
            all the boxes.
            <br>
            <br>
            This is my personal site, and I want to be transparent about about
            <br>
            where I thrive and where I don't. Trying to tell people what they
            <br>
            want to hear is a short-term move. I'm in it for the long haul,
            <br>
            and that starts with finding the right fit.
            <br>
            <br>
            <span class="orangeFont"><b>I value..</b></span>
            <br>
            thoughtful, independent work and can produce high-quality results
            <br>
            in less stressful environments. I perform best in environments
            <br>
            where I have the space to think things through and manage my
            <br>
            tasks at a steady, efficient pace. I prefer fewer meetings, minimal
            <br>
            distractions, and an asynchronous work style that allows me to focus
            <br>
            deeply and deliver quality work while still staying aligned with the
            <br>
            team. While I work best when I have time for deep focus and
            <br>
            independent tasks, I also thrive in smaller collaborative settings,
            <br>
            such as working closely with developers. I'm always ready to seek
            <br>
            help when I hit a roadblock or be there for the team when they need
            <br>
            me.
            <br>
            <br>
            <span class="orangeFont"><b>I'm comfortable..</b></span>
            <br>
            with vague or evolving requirements. I don't need everything spelled
            <br>
            out for me or much handholding. In fact, I actually prefer unstructured
            <br>
            environments because they give me the freedom and autonomy to figure
            <br>
            things out as I go. I trust my judgment and experience to guide me when
            <br>
            things aren't perfectly laid out and enjoy the challenge of navigating
            <br>
            ambiguity. If something doesn't feel right, I'll ask for clarification,
            <br>
            but I'm comfortable with taking the initiative to find solutions
            <br>
            independently.
            <br>
            <br>
            <span class="orangeFont"><b>My Ideal Work Environment</b></span>
            <br>
            I've worked in a mix of Waterfall and Agile setups, and it's been a bit
            <br>
            of a mashup. In some places, things were handed off to QA after devs
            <br>
            finished their initial coding. In others, I've been involved in the design
            <br>
            phase, and at one place, I was taking stakeholder requests and turning
            <br>
            them into requirements.
            <br>
            <br>
            <strong>Scrum</strong> feels like a more prescriptive way of doing Agile, with its
            <br>
            time-boxed sprints and ceremonies (meetings).  It's a bit more
            <br>
            structured than what I find works best for me. I've found it can be
            <br>
            harder to adapt to the level of oversight, as I tend to thrive in
            <br>
            environments where I have more independence. I've found that when
            <br>
            sprint planning becomes a firm commitment and story points are treated
            <br>
            like timecards, it leads to unnecessary stress and a focus on output
            <br>
            over quality. I've been in that environment, and it's not a setup I
            <br>
            want to repeat.
            <br>
            <br>
            I prefer a more <strong>Kanban</strong> style approach, where the focus is on flexibility,
            <br>
            flow, and collaboration. There's less pressure around rigid processes,
            <br>
            and more emphasis on getting things done thoughtfully and at a sustainable
            <br>
            pace. Additionally, Kanban generally involves fewer meetings, allowing for
            <br>
            more time to focus on the actual work. I believe Kanban aligns more with
            <br>
            the spirit of the <a href="https://agilemanifesto.org/" target="_blank" rel="noopener noreferrer">Agile Manifesto</a>, which prioritizes flexibility, collaboration,
            <br>
            and adaptability over rigid processes.
            <br>
            <br>
            That said, I've worked at one place that practiced what I'd call <strong>"Light Scrum"</strong>,
            <br>
            and it worked fairly well. There were no strict deadlines, no story points, and
            <br>
            the devs and I weren't tied to the estimates we made during sprint planning.
            <br>
            It was more collaborative and less about chasing numbers or rigid deadlines.
            <br>
            <br>
            <span class="orangeFont" id="agile-scrum-anti-patterns">Agile/Scrum Anti-Patterns</span> ❌
            <br>
            Tying story points to hours is an anti-pattern. Story points are meant to
            <br>
            represent effort or complexity, not time. If you're linking them to hours,
            <br>
            you might as well just call them hours from the start.
            <br>
            <br>
            If you divide story points equally among the team, you're treating them like
            <br>
            they're based on time, assuming each person will spend the same amount
            <br>
            of time on their tasks during the sprint. Splitting them evenly suggests
            <br>
            that everyone will contribute the same amount of effort, which isn't true.
            <br>
            Some tasks might be easier or harder for different people, and their pace
            <br>
            can vary.
            <br>
            <br>
            Another pitfall is treating estimates like commitments. Estimates are just
            <br>
            guesses based on what we know at the time, and they're often wrong. Yet,
            <br>
            in some places, once an estimate is made, it's treated like a firm
            <br>
            commitment.
            <br>
            <br>
            I've experienced a situation where QA points were determined as half of
            <br>
            dev points, which can oversimplify the complexity of testing. It's like
            <br>
            assuming cleaning the kitchen is always half the effort of cooking dinner.
            <br>
            <br>            
            When story points are treated like a timecard or a strict work quota, it
            <br>
            leads to micromanagement and puts too much emphasis on output
            <br>
            instead of quality. I've experienced that in one environment, and it's
            <br>
            not something I'd want to do again. Most places I've worked at were
            <br>
            much more flexible, focusing on collaboration, delivering value, and
            <br>
            continuous improvement over chasing numbers or rigid deadlines.
            <ol>
            <li><a href="https://resources.scrumalliance.org/Article/story-point-estimation" target="_blank" rel="noopener noreferrer">What Is Story Point Estimation?</a></li>
            <li><a href="https://www.scrum.org/resources/commitment-vs-forecast" target="_blank" rel="noopener noreferrer">Commitment vs. Forecast: A Subtle But Important Change to Scrum</a></li>
            <li><a href="https://www.scrum.org/resources/blog/story-points-estimate-or-not-estimate" target="_blank" rel="noopener noreferrer">Story Points: To Estimate or Not to Estimate</a></li>
            </ol>
            ------------------------------------------------------------------------
            <br>
            <a href ="#top-work-style">Top <span class="arrow" data.cy="up-arrow-philosophy">⇧</span></a>
            <!-- Keep three line breaks at bottom so it's easier to access the 'Top' link using iphone -->
            <br>
            <br>
            <br>
            <script src='https://js.sentry-cdn.com/67cde871b86c2bc34ccf16cbbd00f446.min.js' crossorigin="anonymous"></script>
            <script src="/js/dateAndTime.js"></script>
            <script src="/js/jokeApi.js"></script>
        </body>
        </html>