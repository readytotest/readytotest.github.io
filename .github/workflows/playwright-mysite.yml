# ╔═════════════════════════════════════════════════════════════╗
# ║  We have two separate Playwright config files.              ║
# ║  Why? Running Playwright locally, I want the tests to       ║
# ║  run in headed mode and slowMo so I can watch them, but     ║
# ║  I don't want that in the CI env. And locally...            ║
# ║  I run one spec at a time and one test at a time so I can   ║
# ║  watch it playback, whereas in CI/CD the tests run in       ║
# ║  parallel for faster execution. Also I'm specifying retry   ║
# ║  attempts in the CI/CD config with no need to check the env ║
# ║  variable (process.env.CI) as I separate the two configs.   ║
# ║                                                             ║
# ║  If you explore the root of the test-playwright repo, you'll║
# ║  find two separate configuration files.                     ║
# ║  playwright.actions.config.ts (for GitHub Actions)          ║
# ║  playwright.config.ts (for running tests locally)           ║
# ║  I created a GitHub Actions variable to specify the CI      ║
# ║  version of the config to run in the GitHub runner          ║
# ║  environment.                                               ║
# ╚═════════════════════════════════════════════════════════════╝

# Note:
# Tests are triggered on both push and pull_request events,
# which results in duplicate runs (for PRs).
#
# Since I push directly to 'main' for most updates (except Dependabot PRs),
# this setup works fine for me.
#
# I have GitGuardian configured both through YAML and as a GitHub App integration.
# This results in redundant checks, but I wanted to see how both approaches work.

# One time it appears a race condition occured when multiple Dependabot PRs were open and tried to push the Allure report to the main branch in the Allure repo.
# You may see this error:
# ! [remote rejected] main -> main (cannot lock ref 'refs/heads/main').
# - This doesn't slow things down because after merging a PR, Dependabot automatically rebases any other open Dependabot PRs and reruns the tests.
# - Once you merge in the first PR, just wait for the second PR to rebase as usual. If it doesn't, click the "Update Branch" button in the PR.
# - If it happens again I'll look into it further, but for now it doesn't seem to be a big issue.

# GitHub Contexts: https://docs.github.com/en/enterprise-cloud@latest/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context

name: Playwright GitHub Page (manual, pr/push)
env:
  PLAYWRIGHT_ACTIONS_CONFIG: ${{ vars.PLAYWRIGHT_ACTIONS_CONFIG }}
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  Playwright-GitHub-Page-Test:
    runs-on: ubuntu-latest
    timeout-minutes: 10 #I'd set a timeout in case something hangs, which I've seen happen. This could waste your GitHub Actions minutes.
    steps:
      - name: Set Time Zone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "America/Los_Angeles" # GitHub Actions runner is in UTC time zone by default, which can cause date assertions to fail

      - name: Print Date and Time
        run: date

      - name: Message
        run: |
          echo "This action executes Playwright tests against pull requests and commits"
          echo "Configuration: playwright.actions.config.ts"
          echo "User: [${{ github.actor }}] initiated this test run"
          echo "Commit subject: ${{ github.event.commits[0].message }}"
          echo "Commit hash: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "GitHub workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪🧪"

      # First, we will check out two repos because the website files
      # exist in one repo and Playwright exists in a different repo
      # Further down we will check out a third repo Playwright-Allure-Report

      # Check out primary repo where I will start a server locally in the GH Runner environment
      - name: Checkout Website Repo
        uses: actions/checkout@v4.2.2

      # Check out second repo where Playwright scripts live
      - name: Checkout Playwright Repo
        uses: actions/checkout@v4.2.2
        with:
          repository: readytotest/test-playwright
          #token: ${{ secrets.GH_PAT }} If checking out a private repo, create a secret called `GH_PAT` that contains your personal access token
          ref: main
          path: ./test-playwright #Copy the Playwright repo to this directory within the main repo

      - name: Install dependencies
        working-directory: ./test-playwright #This is the sub-directory where the Playwright repo was copied to
        run: npm ci

      - name: Setup Node.js environment with most recent version
        uses: actions/setup-node@v4.3.0
        with:
          node-version: "latest"
        #actions/setup-node installs Node.js globally for the entire GitHub Actions runner,
        #not just within a specific directory or repository.
        #That's why I didn't specify a working directory in this step.

      - name: Start Local Webserver in GH Runner environment (http://localhost:3000)
        run: | #We need the & sleep 1 or it will hang on this step and won't progress
          chmod +x start-server.sh
          ./start-server.sh &
          sleep 1

      - name: CD to test-playwright directory, print node version, and list contents
        run: |
          cd test-playwright
          node -v
          ls

        #Install OpenJDK 11 for Allure to work
      - name: Install OpenJDK 11
        run: sudo apt-get install -y openjdk-11-jdk

      - name: Install Playwright Browsers
        working-directory: ./test-playwright #This is the sub-directory where the Playwright repo was copied to
        run: npx playwright install --with-deps
        #Yeah we need this step!

      - name: Run Playwright tests
        working-directory: ./test-playwright #This is the sub-directory where the Playwright repo was copied to
        #Tests against http://localhost:3000
        run: npx playwright test --config $PLAYWRIGHT_ACTIONS_CONFIG
        #Remove the continue-on-error: true I was tinking with to see how it works
        #Just keep the if always below, otherwise the workflow looks like it passed
        #the Playwright tests (even if it failed)

      - name: Upload Built-In HTML Report (Not Allure) to GitHub Actions Workflow Run Summary Page
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: Built-in Playwright HTML Report Test Results + Video
          path: ./test-playwright/playwright-report/
          if-no-files-found: warn
          retention-days: 60

      - name: Load Allure test report history (Checkout Playwright-Allure-Report repo)
        uses: actions/checkout@v4.2.2
        if: always()
        continue-on-error: true
        with:
          repository: readytotest/playwright-allure-report # Specify the external repo
          ref: main
          path: ./playwright-allure-report/history # This is the destination path in the current repo in the GitHub Actions runner

      # https://allurereport.org/docs/history-and-retries/#tests-history
      # https://allurereport.org/docs/integrations-github/#build-test-report
      # https://github.com/peaceiris/actions-gh-pages
      # Build the new Allure Report
      - name: Build test report
        uses: simple-elf/allure-report-action@v1.12
        if: always()
        with:
          gh_pages: ./playwright-allure-report/history # The path to the previous report history in the playwright-allure-report repo(subdir)
          allure_results: ./test-playwright/allure-results # Path to the current test results in the test-playwright repo (subdir)
          allure_history: ./allure-report # Directory to save the new Allure report in the readytotest.github.io repo

      # Deploy Allure Report to GitHub Pages https://readytotest.github.io/playwright-allure-report/
      # Don't forget to add the token to your Actions secrets in the repo the YAML is running in
      # AND ---> if you use Dependabot like I do, you need to add that same token to the Dependabot secrets as well
      # OR ---> All your Dependabot PRs will fail because it can't access the token!!!!
      - name: Deploy Allure Report to GitHub Pages (in playwright-allure-report repo)
        uses: peaceiris/actions-gh-pages@v4.0.0
        if: always()
        with:
          personal_token: ${{ secrets.PERSONAL_TOKEN_ALLURE }}
          external_repository: readytotest/playwright-allure-report
          publish_branch: main
          publish_dir: ./allure-report #This is the directory of the readytotest.github.io repo where the new Allure report is copied FROM!
          keep_files: false #Setting to false as the repo size will grow too large.
          #Also be aware if you have keep_files at true, it will erase EVERTYHING IN the repo that is not an allure report file

      # https://tools.slack.dev/slack-github-action/sending-techniques/sending-data-slack-incoming-webhook/
      - name: Send to Slack channel
        if: always()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.PLAYWRIGHT_SLACK }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Playwright Test Summary*\n*Commit by:* ${{ github.actor }}\n*Commit hash:* ${{ github.sha }}\n*Test Status:* ${{ job.status }}\n*Branch:* ${{ github.ref_name }}\n*GitHub Workflow URL:*\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Allure Report:*\nhttps://readytotest.github.io/playwright-allure-report/"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Playwright Test Summary*\n*Commit by:* ${{ github.actor }}\n*Commit hash:* ${{ github.sha }}\n*Job Status:* ${{ job.status }}\n*Branch:* ${{ github.ref_name }}\n*GitHub Workflow URL:*\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Allure Report:*\nhttps://readytotest.github.io/playwright-allure-report/"
